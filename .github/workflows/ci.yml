name: CI

on:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

  workflow_dispatch:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: 1

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET SDK v8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.411
        env:
          DOTNET_INSTALL_DIR: /usr/share/dotnet

      - name: Install .NET SDK v9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.301
        env:
          DOTNET_INSTALL_DIR: /usr/share/dotnet

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: 5.x

      - name: Cache NuGet Packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
            nuget-${{ runner.os }}-

      - name: Add GitHub NuGet Source
        run: dotnet nuget add source --username DrBarnabus --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name "GitHub" "https://nuget.pkg.github.com/DrBarnabus/index.json"

      - name: Execute GitVersion
        uses: gittools/actions/gitversion/execute@v3.0.0
        id: gitversion

      - name: Restore
        run: dotnet restore --locked-mode
      - name: Build
        run: dotnet build -c Release --no-restore -p:Version=${{ steps.gitversion.outputs.semVer }} -p:PackageVersion=${{ steps.gitversion.outputs.semVer }}
      - name: Unit Test
        run: |
          dotnet test src/CompositeKey.SourceGeneration.UnitTests -c Release --no-restore --no-build --logger:"junit;LogFileName=sourcegeneration.{framework}.results.xml" --collect:"XPlat Code Coverage" --results-directory unit-test-results -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet test src/CompositeKey.Analyzers.Common.UnitTests -c Release --no-restore --no-build --logger:"junit;LogFileName=analyzers.common.{framework}.results.xml" --collect:"XPlat Code Coverage" --results-directory unit-test-results -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet test src/CompositeKey.Analyzers.UnitTests -c Release --no-restore --no-build --logger:"junit;LogFileName=analyzers.{framework}.results.xml" --collect:"XPlat Code Coverage" --results-directory unit-test-results -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
      - name: Functional Test
        run: dotnet test src/CompositeKey.SourceGeneration.FunctionalTests -c Release --no-restore --no-build --logger:"junit;LogFileName={framework}.results.xml" --results-directory functional-test-results
      - name: Pack
        run: dotnet pack src/CompositeKey -c Release --no-build -p:Version=${{ steps.gitversion.outputs.semVer }} -p:PackageVersion=${{ steps.gitversion.outputs.semVer }} -o _output

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-test-results/*/coverage.opencover.xml

      - name: Upload Unit Test Results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: unit-test-results/*.results.xml
          flags: unit
      - name: Upload Functional Test Results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: functional-test-results/*.results.xml
          flags: functional

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ${{ github.workspace }}/_output/*.nupkg

      - name: Push
        if: github.event_name == 'workflow_dispatch' && github.event.ref == 'refs/heads/main'
        run: |
          dotnet nuget push _output/*.nupkg --source "GitHub" --api-key ${{ secrets.GITHUB_TOKEN }}
          dotnet nuget push _output/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
